// Code generated by counterfeiter. DO NOT EDIT.
package userPlantsfakes

import (
	"context"
	"sync"

	user_plants "github.com/egoldfein/terra/internal/userPlants"
)

type FakeAPI struct {
	AddPlantStub        func(context.Context, string, string, string, string) (*user_plants.Plant, error)
	addPlantMutex       sync.RWMutex
	addPlantArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 string
		arg5 string
	}
	addPlantReturns struct {
		result1 *user_plants.Plant
		result2 error
	}
	addPlantReturnsOnCall map[int]struct {
		result1 *user_plants.Plant
		result2 error
	}
	CreatePlantListStub        func(context.Context, string, string) (*user_plants.PlantList, error)
	createPlantListMutex       sync.RWMutex
	createPlantListArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}
	createPlantListReturns struct {
		result1 *user_plants.PlantList
		result2 error
	}
	createPlantListReturnsOnCall map[int]struct {
		result1 *user_plants.PlantList
		result2 error
	}
	GetPlantStub        func(context.Context, string) (*user_plants.Plant, error)
	getPlantMutex       sync.RWMutex
	getPlantArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	getPlantReturns struct {
		result1 *user_plants.Plant
		result2 error
	}
	getPlantReturnsOnCall map[int]struct {
		result1 *user_plants.Plant
		result2 error
	}
	GetPlantListStub        func(context.Context, string) (*[]user_plants.Plant, error)
	getPlantListMutex       sync.RWMutex
	getPlantListArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	getPlantListReturns struct {
		result1 *[]user_plants.Plant
		result2 error
	}
	getPlantListReturnsOnCall map[int]struct {
		result1 *[]user_plants.Plant
		result2 error
	}
	GetPlantListsStub        func(context.Context, string) (*[]user_plants.PlantList, error)
	getPlantListsMutex       sync.RWMutex
	getPlantListsArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	getPlantListsReturns struct {
		result1 *[]user_plants.PlantList
		result2 error
	}
	getPlantListsReturnsOnCall map[int]struct {
		result1 *[]user_plants.PlantList
		result2 error
	}
	UpdatePlantStub        func(context.Context, string, string) (*user_plants.Plant, error)
	updatePlantMutex       sync.RWMutex
	updatePlantArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}
	updatePlantReturns struct {
		result1 *user_plants.Plant
		result2 error
	}
	updatePlantReturnsOnCall map[int]struct {
		result1 *user_plants.Plant
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeAPI) AddPlant(arg1 context.Context, arg2 string, arg3 string, arg4 string, arg5 string) (*user_plants.Plant, error) {
	fake.addPlantMutex.Lock()
	ret, specificReturn := fake.addPlantReturnsOnCall[len(fake.addPlantArgsForCall)]
	fake.addPlantArgsForCall = append(fake.addPlantArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 string
		arg5 string
	}{arg1, arg2, arg3, arg4, arg5})
	stub := fake.AddPlantStub
	fakeReturns := fake.addPlantReturns
	fake.recordInvocation("AddPlant", []interface{}{arg1, arg2, arg3, arg4, arg5})
	fake.addPlantMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeAPI) AddPlantCallCount() int {
	fake.addPlantMutex.RLock()
	defer fake.addPlantMutex.RUnlock()
	return len(fake.addPlantArgsForCall)
}

func (fake *FakeAPI) AddPlantCalls(stub func(context.Context, string, string, string, string) (*user_plants.Plant, error)) {
	fake.addPlantMutex.Lock()
	defer fake.addPlantMutex.Unlock()
	fake.AddPlantStub = stub
}

func (fake *FakeAPI) AddPlantArgsForCall(i int) (context.Context, string, string, string, string) {
	fake.addPlantMutex.RLock()
	defer fake.addPlantMutex.RUnlock()
	argsForCall := fake.addPlantArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5
}

func (fake *FakeAPI) AddPlantReturns(result1 *user_plants.Plant, result2 error) {
	fake.addPlantMutex.Lock()
	defer fake.addPlantMutex.Unlock()
	fake.AddPlantStub = nil
	fake.addPlantReturns = struct {
		result1 *user_plants.Plant
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) AddPlantReturnsOnCall(i int, result1 *user_plants.Plant, result2 error) {
	fake.addPlantMutex.Lock()
	defer fake.addPlantMutex.Unlock()
	fake.AddPlantStub = nil
	if fake.addPlantReturnsOnCall == nil {
		fake.addPlantReturnsOnCall = make(map[int]struct {
			result1 *user_plants.Plant
			result2 error
		})
	}
	fake.addPlantReturnsOnCall[i] = struct {
		result1 *user_plants.Plant
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) CreatePlantList(arg1 context.Context, arg2 string, arg3 string) (*user_plants.PlantList, error) {
	fake.createPlantListMutex.Lock()
	ret, specificReturn := fake.createPlantListReturnsOnCall[len(fake.createPlantListArgsForCall)]
	fake.createPlantListArgsForCall = append(fake.createPlantListArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.CreatePlantListStub
	fakeReturns := fake.createPlantListReturns
	fake.recordInvocation("CreatePlantList", []interface{}{arg1, arg2, arg3})
	fake.createPlantListMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeAPI) CreatePlantListCallCount() int {
	fake.createPlantListMutex.RLock()
	defer fake.createPlantListMutex.RUnlock()
	return len(fake.createPlantListArgsForCall)
}

func (fake *FakeAPI) CreatePlantListCalls(stub func(context.Context, string, string) (*user_plants.PlantList, error)) {
	fake.createPlantListMutex.Lock()
	defer fake.createPlantListMutex.Unlock()
	fake.CreatePlantListStub = stub
}

func (fake *FakeAPI) CreatePlantListArgsForCall(i int) (context.Context, string, string) {
	fake.createPlantListMutex.RLock()
	defer fake.createPlantListMutex.RUnlock()
	argsForCall := fake.createPlantListArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeAPI) CreatePlantListReturns(result1 *user_plants.PlantList, result2 error) {
	fake.createPlantListMutex.Lock()
	defer fake.createPlantListMutex.Unlock()
	fake.CreatePlantListStub = nil
	fake.createPlantListReturns = struct {
		result1 *user_plants.PlantList
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) CreatePlantListReturnsOnCall(i int, result1 *user_plants.PlantList, result2 error) {
	fake.createPlantListMutex.Lock()
	defer fake.createPlantListMutex.Unlock()
	fake.CreatePlantListStub = nil
	if fake.createPlantListReturnsOnCall == nil {
		fake.createPlantListReturnsOnCall = make(map[int]struct {
			result1 *user_plants.PlantList
			result2 error
		})
	}
	fake.createPlantListReturnsOnCall[i] = struct {
		result1 *user_plants.PlantList
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) GetPlant(arg1 context.Context, arg2 string) (*user_plants.Plant, error) {
	fake.getPlantMutex.Lock()
	ret, specificReturn := fake.getPlantReturnsOnCall[len(fake.getPlantArgsForCall)]
	fake.getPlantArgsForCall = append(fake.getPlantArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.GetPlantStub
	fakeReturns := fake.getPlantReturns
	fake.recordInvocation("GetPlant", []interface{}{arg1, arg2})
	fake.getPlantMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeAPI) GetPlantCallCount() int {
	fake.getPlantMutex.RLock()
	defer fake.getPlantMutex.RUnlock()
	return len(fake.getPlantArgsForCall)
}

func (fake *FakeAPI) GetPlantCalls(stub func(context.Context, string) (*user_plants.Plant, error)) {
	fake.getPlantMutex.Lock()
	defer fake.getPlantMutex.Unlock()
	fake.GetPlantStub = stub
}

func (fake *FakeAPI) GetPlantArgsForCall(i int) (context.Context, string) {
	fake.getPlantMutex.RLock()
	defer fake.getPlantMutex.RUnlock()
	argsForCall := fake.getPlantArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeAPI) GetPlantReturns(result1 *user_plants.Plant, result2 error) {
	fake.getPlantMutex.Lock()
	defer fake.getPlantMutex.Unlock()
	fake.GetPlantStub = nil
	fake.getPlantReturns = struct {
		result1 *user_plants.Plant
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) GetPlantReturnsOnCall(i int, result1 *user_plants.Plant, result2 error) {
	fake.getPlantMutex.Lock()
	defer fake.getPlantMutex.Unlock()
	fake.GetPlantStub = nil
	if fake.getPlantReturnsOnCall == nil {
		fake.getPlantReturnsOnCall = make(map[int]struct {
			result1 *user_plants.Plant
			result2 error
		})
	}
	fake.getPlantReturnsOnCall[i] = struct {
		result1 *user_plants.Plant
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) GetPlantList(arg1 context.Context, arg2 string) (*[]user_plants.Plant, error) {
	fake.getPlantListMutex.Lock()
	ret, specificReturn := fake.getPlantListReturnsOnCall[len(fake.getPlantListArgsForCall)]
	fake.getPlantListArgsForCall = append(fake.getPlantListArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.GetPlantListStub
	fakeReturns := fake.getPlantListReturns
	fake.recordInvocation("GetPlantList", []interface{}{arg1, arg2})
	fake.getPlantListMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeAPI) GetPlantListCallCount() int {
	fake.getPlantListMutex.RLock()
	defer fake.getPlantListMutex.RUnlock()
	return len(fake.getPlantListArgsForCall)
}

func (fake *FakeAPI) GetPlantListCalls(stub func(context.Context, string) (*[]user_plants.Plant, error)) {
	fake.getPlantListMutex.Lock()
	defer fake.getPlantListMutex.Unlock()
	fake.GetPlantListStub = stub
}

func (fake *FakeAPI) GetPlantListArgsForCall(i int) (context.Context, string) {
	fake.getPlantListMutex.RLock()
	defer fake.getPlantListMutex.RUnlock()
	argsForCall := fake.getPlantListArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeAPI) GetPlantListReturns(result1 *[]user_plants.Plant, result2 error) {
	fake.getPlantListMutex.Lock()
	defer fake.getPlantListMutex.Unlock()
	fake.GetPlantListStub = nil
	fake.getPlantListReturns = struct {
		result1 *[]user_plants.Plant
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) GetPlantListReturnsOnCall(i int, result1 *[]user_plants.Plant, result2 error) {
	fake.getPlantListMutex.Lock()
	defer fake.getPlantListMutex.Unlock()
	fake.GetPlantListStub = nil
	if fake.getPlantListReturnsOnCall == nil {
		fake.getPlantListReturnsOnCall = make(map[int]struct {
			result1 *[]user_plants.Plant
			result2 error
		})
	}
	fake.getPlantListReturnsOnCall[i] = struct {
		result1 *[]user_plants.Plant
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) GetPlantLists(arg1 context.Context, arg2 string) (*[]user_plants.PlantList, error) {
	fake.getPlantListsMutex.Lock()
	ret, specificReturn := fake.getPlantListsReturnsOnCall[len(fake.getPlantListsArgsForCall)]
	fake.getPlantListsArgsForCall = append(fake.getPlantListsArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.GetPlantListsStub
	fakeReturns := fake.getPlantListsReturns
	fake.recordInvocation("GetPlantLists", []interface{}{arg1, arg2})
	fake.getPlantListsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeAPI) GetPlantListsCallCount() int {
	fake.getPlantListsMutex.RLock()
	defer fake.getPlantListsMutex.RUnlock()
	return len(fake.getPlantListsArgsForCall)
}

func (fake *FakeAPI) GetPlantListsCalls(stub func(context.Context, string) (*[]user_plants.PlantList, error)) {
	fake.getPlantListsMutex.Lock()
	defer fake.getPlantListsMutex.Unlock()
	fake.GetPlantListsStub = stub
}

func (fake *FakeAPI) GetPlantListsArgsForCall(i int) (context.Context, string) {
	fake.getPlantListsMutex.RLock()
	defer fake.getPlantListsMutex.RUnlock()
	argsForCall := fake.getPlantListsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeAPI) GetPlantListsReturns(result1 *[]user_plants.PlantList, result2 error) {
	fake.getPlantListsMutex.Lock()
	defer fake.getPlantListsMutex.Unlock()
	fake.GetPlantListsStub = nil
	fake.getPlantListsReturns = struct {
		result1 *[]user_plants.PlantList
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) GetPlantListsReturnsOnCall(i int, result1 *[]user_plants.PlantList, result2 error) {
	fake.getPlantListsMutex.Lock()
	defer fake.getPlantListsMutex.Unlock()
	fake.GetPlantListsStub = nil
	if fake.getPlantListsReturnsOnCall == nil {
		fake.getPlantListsReturnsOnCall = make(map[int]struct {
			result1 *[]user_plants.PlantList
			result2 error
		})
	}
	fake.getPlantListsReturnsOnCall[i] = struct {
		result1 *[]user_plants.PlantList
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) UpdatePlant(arg1 context.Context, arg2 string, arg3 string) (*user_plants.Plant, error) {
	fake.updatePlantMutex.Lock()
	ret, specificReturn := fake.updatePlantReturnsOnCall[len(fake.updatePlantArgsForCall)]
	fake.updatePlantArgsForCall = append(fake.updatePlantArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.UpdatePlantStub
	fakeReturns := fake.updatePlantReturns
	fake.recordInvocation("UpdatePlant", []interface{}{arg1, arg2, arg3})
	fake.updatePlantMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeAPI) UpdatePlantCallCount() int {
	fake.updatePlantMutex.RLock()
	defer fake.updatePlantMutex.RUnlock()
	return len(fake.updatePlantArgsForCall)
}

func (fake *FakeAPI) UpdatePlantCalls(stub func(context.Context, string, string) (*user_plants.Plant, error)) {
	fake.updatePlantMutex.Lock()
	defer fake.updatePlantMutex.Unlock()
	fake.UpdatePlantStub = stub
}

func (fake *FakeAPI) UpdatePlantArgsForCall(i int) (context.Context, string, string) {
	fake.updatePlantMutex.RLock()
	defer fake.updatePlantMutex.RUnlock()
	argsForCall := fake.updatePlantArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeAPI) UpdatePlantReturns(result1 *user_plants.Plant, result2 error) {
	fake.updatePlantMutex.Lock()
	defer fake.updatePlantMutex.Unlock()
	fake.UpdatePlantStub = nil
	fake.updatePlantReturns = struct {
		result1 *user_plants.Plant
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) UpdatePlantReturnsOnCall(i int, result1 *user_plants.Plant, result2 error) {
	fake.updatePlantMutex.Lock()
	defer fake.updatePlantMutex.Unlock()
	fake.UpdatePlantStub = nil
	if fake.updatePlantReturnsOnCall == nil {
		fake.updatePlantReturnsOnCall = make(map[int]struct {
			result1 *user_plants.Plant
			result2 error
		})
	}
	fake.updatePlantReturnsOnCall[i] = struct {
		result1 *user_plants.Plant
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.addPlantMutex.RLock()
	defer fake.addPlantMutex.RUnlock()
	fake.createPlantListMutex.RLock()
	defer fake.createPlantListMutex.RUnlock()
	fake.getPlantMutex.RLock()
	defer fake.getPlantMutex.RUnlock()
	fake.getPlantListMutex.RLock()
	defer fake.getPlantListMutex.RUnlock()
	fake.getPlantListsMutex.RLock()
	defer fake.getPlantListsMutex.RUnlock()
	fake.updatePlantMutex.RLock()
	defer fake.updatePlantMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeAPI) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ user_plants.API = new(FakeAPI)
