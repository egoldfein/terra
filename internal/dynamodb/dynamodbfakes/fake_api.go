// Code generated by counterfeiter. DO NOT EDIT.
package dynamodbfakes

import (
	"context"
	"sync"

	dynamodba "github.com/aws/aws-sdk-go/service/dynamodb"
	"github.com/egoldfein/terra/internal/dynamodb"
)

type FakeAPI struct {
	GetStub        func(context.Context, string, map[string]*dynamodba.AttributeValue) (map[string]*dynamodba.AttributeValue, error)
	getMutex       sync.RWMutex
	getArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 map[string]*dynamodba.AttributeValue
	}
	getReturns struct {
		result1 map[string]*dynamodba.AttributeValue
		result2 error
	}
	getReturnsOnCall map[int]struct {
		result1 map[string]*dynamodba.AttributeValue
		result2 error
	}
	PutStub        func(context.Context, string, map[string]*dynamodba.AttributeValue) (map[string]*dynamodba.AttributeValue, error)
	putMutex       sync.RWMutex
	putArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 map[string]*dynamodba.AttributeValue
	}
	putReturns struct {
		result1 map[string]*dynamodba.AttributeValue
		result2 error
	}
	putReturnsOnCall map[int]struct {
		result1 map[string]*dynamodba.AttributeValue
		result2 error
	}
	ScanStub        func(context.Context, *dynamodba.ScanInput) (*dynamodba.ScanOutput, error)
	scanMutex       sync.RWMutex
	scanArgsForCall []struct {
		arg1 context.Context
		arg2 *dynamodba.ScanInput
	}
	scanReturns struct {
		result1 *dynamodba.ScanOutput
		result2 error
	}
	scanReturnsOnCall map[int]struct {
		result1 *dynamodba.ScanOutput
		result2 error
	}
	UpdateStub        func(context.Context, string, map[string]*dynamodba.AttributeValue, map[string]*dynamodba.AttributeValue, string) (map[string]*dynamodba.AttributeValue, error)
	updateMutex       sync.RWMutex
	updateArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 map[string]*dynamodba.AttributeValue
		arg4 map[string]*dynamodba.AttributeValue
		arg5 string
	}
	updateReturns struct {
		result1 map[string]*dynamodba.AttributeValue
		result2 error
	}
	updateReturnsOnCall map[int]struct {
		result1 map[string]*dynamodba.AttributeValue
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeAPI) Get(arg1 context.Context, arg2 string, arg3 map[string]*dynamodba.AttributeValue) (map[string]*dynamodba.AttributeValue, error) {
	fake.getMutex.Lock()
	ret, specificReturn := fake.getReturnsOnCall[len(fake.getArgsForCall)]
	fake.getArgsForCall = append(fake.getArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 map[string]*dynamodba.AttributeValue
	}{arg1, arg2, arg3})
	stub := fake.GetStub
	fakeReturns := fake.getReturns
	fake.recordInvocation("Get", []interface{}{arg1, arg2, arg3})
	fake.getMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeAPI) GetCallCount() int {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	return len(fake.getArgsForCall)
}

func (fake *FakeAPI) GetCalls(stub func(context.Context, string, map[string]*dynamodba.AttributeValue) (map[string]*dynamodba.AttributeValue, error)) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = stub
}

func (fake *FakeAPI) GetArgsForCall(i int) (context.Context, string, map[string]*dynamodba.AttributeValue) {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	argsForCall := fake.getArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeAPI) GetReturns(result1 map[string]*dynamodba.AttributeValue, result2 error) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = nil
	fake.getReturns = struct {
		result1 map[string]*dynamodba.AttributeValue
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) GetReturnsOnCall(i int, result1 map[string]*dynamodba.AttributeValue, result2 error) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = nil
	if fake.getReturnsOnCall == nil {
		fake.getReturnsOnCall = make(map[int]struct {
			result1 map[string]*dynamodba.AttributeValue
			result2 error
		})
	}
	fake.getReturnsOnCall[i] = struct {
		result1 map[string]*dynamodba.AttributeValue
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) Put(arg1 context.Context, arg2 string, arg3 map[string]*dynamodba.AttributeValue) (map[string]*dynamodba.AttributeValue, error) {
	fake.putMutex.Lock()
	ret, specificReturn := fake.putReturnsOnCall[len(fake.putArgsForCall)]
	fake.putArgsForCall = append(fake.putArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 map[string]*dynamodba.AttributeValue
	}{arg1, arg2, arg3})
	stub := fake.PutStub
	fakeReturns := fake.putReturns
	fake.recordInvocation("Put", []interface{}{arg1, arg2, arg3})
	fake.putMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeAPI) PutCallCount() int {
	fake.putMutex.RLock()
	defer fake.putMutex.RUnlock()
	return len(fake.putArgsForCall)
}

func (fake *FakeAPI) PutCalls(stub func(context.Context, string, map[string]*dynamodba.AttributeValue) (map[string]*dynamodba.AttributeValue, error)) {
	fake.putMutex.Lock()
	defer fake.putMutex.Unlock()
	fake.PutStub = stub
}

func (fake *FakeAPI) PutArgsForCall(i int) (context.Context, string, map[string]*dynamodba.AttributeValue) {
	fake.putMutex.RLock()
	defer fake.putMutex.RUnlock()
	argsForCall := fake.putArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeAPI) PutReturns(result1 map[string]*dynamodba.AttributeValue, result2 error) {
	fake.putMutex.Lock()
	defer fake.putMutex.Unlock()
	fake.PutStub = nil
	fake.putReturns = struct {
		result1 map[string]*dynamodba.AttributeValue
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) PutReturnsOnCall(i int, result1 map[string]*dynamodba.AttributeValue, result2 error) {
	fake.putMutex.Lock()
	defer fake.putMutex.Unlock()
	fake.PutStub = nil
	if fake.putReturnsOnCall == nil {
		fake.putReturnsOnCall = make(map[int]struct {
			result1 map[string]*dynamodba.AttributeValue
			result2 error
		})
	}
	fake.putReturnsOnCall[i] = struct {
		result1 map[string]*dynamodba.AttributeValue
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) Scan(arg1 context.Context, arg2 *dynamodba.ScanInput) (*dynamodba.ScanOutput, error) {
	fake.scanMutex.Lock()
	ret, specificReturn := fake.scanReturnsOnCall[len(fake.scanArgsForCall)]
	fake.scanArgsForCall = append(fake.scanArgsForCall, struct {
		arg1 context.Context
		arg2 *dynamodba.ScanInput
	}{arg1, arg2})
	stub := fake.ScanStub
	fakeReturns := fake.scanReturns
	fake.recordInvocation("Scan", []interface{}{arg1, arg2})
	fake.scanMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeAPI) ScanCallCount() int {
	fake.scanMutex.RLock()
	defer fake.scanMutex.RUnlock()
	return len(fake.scanArgsForCall)
}

func (fake *FakeAPI) ScanCalls(stub func(context.Context, *dynamodba.ScanInput) (*dynamodba.ScanOutput, error)) {
	fake.scanMutex.Lock()
	defer fake.scanMutex.Unlock()
	fake.ScanStub = stub
}

func (fake *FakeAPI) ScanArgsForCall(i int) (context.Context, *dynamodba.ScanInput) {
	fake.scanMutex.RLock()
	defer fake.scanMutex.RUnlock()
	argsForCall := fake.scanArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeAPI) ScanReturns(result1 *dynamodba.ScanOutput, result2 error) {
	fake.scanMutex.Lock()
	defer fake.scanMutex.Unlock()
	fake.ScanStub = nil
	fake.scanReturns = struct {
		result1 *dynamodba.ScanOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) ScanReturnsOnCall(i int, result1 *dynamodba.ScanOutput, result2 error) {
	fake.scanMutex.Lock()
	defer fake.scanMutex.Unlock()
	fake.ScanStub = nil
	if fake.scanReturnsOnCall == nil {
		fake.scanReturnsOnCall = make(map[int]struct {
			result1 *dynamodba.ScanOutput
			result2 error
		})
	}
	fake.scanReturnsOnCall[i] = struct {
		result1 *dynamodba.ScanOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) Update(arg1 context.Context, arg2 string, arg3 map[string]*dynamodba.AttributeValue, arg4 map[string]*dynamodba.AttributeValue, arg5 string) (map[string]*dynamodba.AttributeValue, error) {
	fake.updateMutex.Lock()
	ret, specificReturn := fake.updateReturnsOnCall[len(fake.updateArgsForCall)]
	fake.updateArgsForCall = append(fake.updateArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 map[string]*dynamodba.AttributeValue
		arg4 map[string]*dynamodba.AttributeValue
		arg5 string
	}{arg1, arg2, arg3, arg4, arg5})
	stub := fake.UpdateStub
	fakeReturns := fake.updateReturns
	fake.recordInvocation("Update", []interface{}{arg1, arg2, arg3, arg4, arg5})
	fake.updateMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeAPI) UpdateCallCount() int {
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	return len(fake.updateArgsForCall)
}

func (fake *FakeAPI) UpdateCalls(stub func(context.Context, string, map[string]*dynamodba.AttributeValue, map[string]*dynamodba.AttributeValue, string) (map[string]*dynamodba.AttributeValue, error)) {
	fake.updateMutex.Lock()
	defer fake.updateMutex.Unlock()
	fake.UpdateStub = stub
}

func (fake *FakeAPI) UpdateArgsForCall(i int) (context.Context, string, map[string]*dynamodba.AttributeValue, map[string]*dynamodba.AttributeValue, string) {
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	argsForCall := fake.updateArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5
}

func (fake *FakeAPI) UpdateReturns(result1 map[string]*dynamodba.AttributeValue, result2 error) {
	fake.updateMutex.Lock()
	defer fake.updateMutex.Unlock()
	fake.UpdateStub = nil
	fake.updateReturns = struct {
		result1 map[string]*dynamodba.AttributeValue
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) UpdateReturnsOnCall(i int, result1 map[string]*dynamodba.AttributeValue, result2 error) {
	fake.updateMutex.Lock()
	defer fake.updateMutex.Unlock()
	fake.UpdateStub = nil
	if fake.updateReturnsOnCall == nil {
		fake.updateReturnsOnCall = make(map[int]struct {
			result1 map[string]*dynamodba.AttributeValue
			result2 error
		})
	}
	fake.updateReturnsOnCall[i] = struct {
		result1 map[string]*dynamodba.AttributeValue
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	fake.putMutex.RLock()
	defer fake.putMutex.RUnlock()
	fake.scanMutex.RLock()
	defer fake.scanMutex.RUnlock()
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeAPI) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ dynamodb.API = new(FakeAPI)
