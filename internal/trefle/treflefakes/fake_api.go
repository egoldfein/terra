// Code generated by counterfeiter. DO NOT EDIT.
package treflefakes

import (
	"context"
	"sync"

	"github.com/egoldfein/terra/internal/trefle"
)

type FakeAPI struct {
	GetDistributionStub        func(context.Context, string) (*trefle.DistributionResp, error)
	getDistributionMutex       sync.RWMutex
	getDistributionArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	getDistributionReturns struct {
		result1 *trefle.DistributionResp
		result2 error
	}
	getDistributionReturnsOnCall map[int]struct {
		result1 *trefle.DistributionResp
		result2 error
	}
	GetPlantStub        func(context.Context, string) (*trefle.PlantResp, error)
	getPlantMutex       sync.RWMutex
	getPlantArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	getPlantReturns struct {
		result1 *trefle.PlantResp
		result2 error
	}
	getPlantReturnsOnCall map[int]struct {
		result1 *trefle.PlantResp
		result2 error
	}
	SearchPlantsStub        func(context.Context, *string, *string, *string, *string) (trefle.PlantListResp, error)
	searchPlantsMutex       sync.RWMutex
	searchPlantsArgsForCall []struct {
		arg1 context.Context
		arg2 *string
		arg3 *string
		arg4 *string
		arg5 *string
	}
	searchPlantsReturns struct {
		result1 trefle.PlantListResp
		result2 error
	}
	searchPlantsReturnsOnCall map[int]struct {
		result1 trefle.PlantListResp
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeAPI) GetDistribution(arg1 context.Context, arg2 string) (*trefle.DistributionResp, error) {
	fake.getDistributionMutex.Lock()
	ret, specificReturn := fake.getDistributionReturnsOnCall[len(fake.getDistributionArgsForCall)]
	fake.getDistributionArgsForCall = append(fake.getDistributionArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.GetDistributionStub
	fakeReturns := fake.getDistributionReturns
	fake.recordInvocation("GetDistribution", []interface{}{arg1, arg2})
	fake.getDistributionMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeAPI) GetDistributionCallCount() int {
	fake.getDistributionMutex.RLock()
	defer fake.getDistributionMutex.RUnlock()
	return len(fake.getDistributionArgsForCall)
}

func (fake *FakeAPI) GetDistributionCalls(stub func(context.Context, string) (*trefle.DistributionResp, error)) {
	fake.getDistributionMutex.Lock()
	defer fake.getDistributionMutex.Unlock()
	fake.GetDistributionStub = stub
}

func (fake *FakeAPI) GetDistributionArgsForCall(i int) (context.Context, string) {
	fake.getDistributionMutex.RLock()
	defer fake.getDistributionMutex.RUnlock()
	argsForCall := fake.getDistributionArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeAPI) GetDistributionReturns(result1 *trefle.DistributionResp, result2 error) {
	fake.getDistributionMutex.Lock()
	defer fake.getDistributionMutex.Unlock()
	fake.GetDistributionStub = nil
	fake.getDistributionReturns = struct {
		result1 *trefle.DistributionResp
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) GetDistributionReturnsOnCall(i int, result1 *trefle.DistributionResp, result2 error) {
	fake.getDistributionMutex.Lock()
	defer fake.getDistributionMutex.Unlock()
	fake.GetDistributionStub = nil
	if fake.getDistributionReturnsOnCall == nil {
		fake.getDistributionReturnsOnCall = make(map[int]struct {
			result1 *trefle.DistributionResp
			result2 error
		})
	}
	fake.getDistributionReturnsOnCall[i] = struct {
		result1 *trefle.DistributionResp
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) GetPlant(arg1 context.Context, arg2 string) (*trefle.PlantResp, error) {
	fake.getPlantMutex.Lock()
	ret, specificReturn := fake.getPlantReturnsOnCall[len(fake.getPlantArgsForCall)]
	fake.getPlantArgsForCall = append(fake.getPlantArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.GetPlantStub
	fakeReturns := fake.getPlantReturns
	fake.recordInvocation("GetPlant", []interface{}{arg1, arg2})
	fake.getPlantMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeAPI) GetPlantCallCount() int {
	fake.getPlantMutex.RLock()
	defer fake.getPlantMutex.RUnlock()
	return len(fake.getPlantArgsForCall)
}

func (fake *FakeAPI) GetPlantCalls(stub func(context.Context, string) (*trefle.PlantResp, error)) {
	fake.getPlantMutex.Lock()
	defer fake.getPlantMutex.Unlock()
	fake.GetPlantStub = stub
}

func (fake *FakeAPI) GetPlantArgsForCall(i int) (context.Context, string) {
	fake.getPlantMutex.RLock()
	defer fake.getPlantMutex.RUnlock()
	argsForCall := fake.getPlantArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeAPI) GetPlantReturns(result1 *trefle.PlantResp, result2 error) {
	fake.getPlantMutex.Lock()
	defer fake.getPlantMutex.Unlock()
	fake.GetPlantStub = nil
	fake.getPlantReturns = struct {
		result1 *trefle.PlantResp
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) GetPlantReturnsOnCall(i int, result1 *trefle.PlantResp, result2 error) {
	fake.getPlantMutex.Lock()
	defer fake.getPlantMutex.Unlock()
	fake.GetPlantStub = nil
	if fake.getPlantReturnsOnCall == nil {
		fake.getPlantReturnsOnCall = make(map[int]struct {
			result1 *trefle.PlantResp
			result2 error
		})
	}
	fake.getPlantReturnsOnCall[i] = struct {
		result1 *trefle.PlantResp
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) SearchPlants(arg1 context.Context, arg2 *string, arg3 *string, arg4 *string, arg5 *string) (trefle.PlantListResp, error) {
	fake.searchPlantsMutex.Lock()
	ret, specificReturn := fake.searchPlantsReturnsOnCall[len(fake.searchPlantsArgsForCall)]
	fake.searchPlantsArgsForCall = append(fake.searchPlantsArgsForCall, struct {
		arg1 context.Context
		arg2 *string
		arg3 *string
		arg4 *string
		arg5 *string
	}{arg1, arg2, arg3, arg4, arg5})
	stub := fake.SearchPlantsStub
	fakeReturns := fake.searchPlantsReturns
	fake.recordInvocation("SearchPlants", []interface{}{arg1, arg2, arg3, arg4, arg5})
	fake.searchPlantsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeAPI) SearchPlantsCallCount() int {
	fake.searchPlantsMutex.RLock()
	defer fake.searchPlantsMutex.RUnlock()
	return len(fake.searchPlantsArgsForCall)
}

func (fake *FakeAPI) SearchPlantsCalls(stub func(context.Context, *string, *string, *string, *string) (trefle.PlantListResp, error)) {
	fake.searchPlantsMutex.Lock()
	defer fake.searchPlantsMutex.Unlock()
	fake.SearchPlantsStub = stub
}

func (fake *FakeAPI) SearchPlantsArgsForCall(i int) (context.Context, *string, *string, *string, *string) {
	fake.searchPlantsMutex.RLock()
	defer fake.searchPlantsMutex.RUnlock()
	argsForCall := fake.searchPlantsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5
}

func (fake *FakeAPI) SearchPlantsReturns(result1 trefle.PlantListResp, result2 error) {
	fake.searchPlantsMutex.Lock()
	defer fake.searchPlantsMutex.Unlock()
	fake.SearchPlantsStub = nil
	fake.searchPlantsReturns = struct {
		result1 trefle.PlantListResp
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) SearchPlantsReturnsOnCall(i int, result1 trefle.PlantListResp, result2 error) {
	fake.searchPlantsMutex.Lock()
	defer fake.searchPlantsMutex.Unlock()
	fake.SearchPlantsStub = nil
	if fake.searchPlantsReturnsOnCall == nil {
		fake.searchPlantsReturnsOnCall = make(map[int]struct {
			result1 trefle.PlantListResp
			result2 error
		})
	}
	fake.searchPlantsReturnsOnCall[i] = struct {
		result1 trefle.PlantListResp
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getDistributionMutex.RLock()
	defer fake.getDistributionMutex.RUnlock()
	fake.getPlantMutex.RLock()
	defer fake.getPlantMutex.RUnlock()
	fake.searchPlantsMutex.RLock()
	defer fake.searchPlantsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeAPI) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ trefle.API = new(FakeAPI)
